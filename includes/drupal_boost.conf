# -*- mode: nginx; mode: flyspell-prog; ispell-local-dictionary: "american" -*-
### Nginx configuration for using Boost with Drupal. This
### configuration makes use of drush
### (http:///drupal.org/project/drush) for site maintenance and like
### tasks:
###
### 1. Run the cronjobs.
### 2. Run the DB and code updates: drush up or drush upc followed by
###    drush updb to run any DB updates required by the code upgrades
###    that were performed.
### 3. Disabling of xmlrpc.xml, install.php (needed only for
###    installing the site) and update.php: all updates are now
###    handled through drush.

## The 'default' location.
location / {

    ## Drupal 404 from can impact performance. If using a module like
    ## search404 then 404's *have *to be handled by Drupal. Uncomment to
    ## relay the handling of 404's to Drupal.
    ## error_page 404 /index.php;

    ## Use index.html whenever there's no index.php.
    location = / {
        error_page 404 =200 /index.html;
    }
    
    ## Using a nested location is the 'correct' way to use regexes.

    ## If accessing an image generated by imagecache, serve it directly if
    ## available, if not relay the request to Drupal to (re)generate the
    ## image.
    location ~* /imagecache/ {
        access_log off;
        expires 30d;
        try_files $uri /index.php?q=$uri&$args;
    }

    ## Drupal 7 generated image handling, i.e., imagecache in core. See:
    ## https://drupal.org/node/371374.
    location ~* /files/styles/ {
        access_log off;            
        expires 30d;
        try_files $uri /index.php?q=$uri&$args;
    }
    
    ## All static files will be served directly.
    location ~* ^.+\.(?:css|js|jpg|jpeg|gif|ico|png|html|xml)$ {
        access_log        off;
        expires           30d;
        ## No need to bleed constant updates. Send the all shebang in one
        ## fell swoop.
        tcp_nodelay off;
    }

    ## Trying to access private files directly returns a 404.
    location ^~ /sites/default/files/private/ {
        internal;
    }

    
    ## Keep a tab on the 'big' static files.
    location ~* ^.+\.(?:m4a|mp3|mp4|mov|ogg|flv|pdf|ppt[x]*)$ {
        expires 30d;
        ## No need to bleed constant updates. Send the all shebang in one
        ## fell swoop.
        tcp_nodelay off;
    }

    
    ## Replicate the Apache <FilesMatch> directive of Drupal standard
    ## .htaccess. Disable access to any code files. Return a 404 to curtail
    ## information disclosure. Hide also the text files.
    location ~* ^(?:.+\.(?:htaccess|make|txt|engine|inc|info|install|module|profile|po|sh|.*sql|theme|tpl(?:\.php)?|xtmpl)|code-style\.pl|/Entries.*|/Repository|/Root|/Tag|/Template)$ {
        return 404; 
    }

    ## First we try the URI and relay to the @cache if not found.
    try_files $uri @cache;
}

## We define a named location for the cache.
location @cache {
    # If there's a cookie with a user ID then that means that
    # it's a logged in user. Relay to Drupal.
    if ($http_cookie ~ "DRUPAL_UID" ) {
        return 405;
    }
    # If the HTTP request method differs from GET or HEAD then
    # relay to Drupal.
    if ($request_method !~ ^(GET|HEAD)$ ) {
        return 405;
    }
    # The error page for the 405 (Method not Allowed) in this
    # context consists in relaying the request to Drupal for
    # processing.
    error_page 405 = /index.php?q=$uri&$args;

    # Now for some header tweaking. We use a date that differs
    # from stock Drupal. Everyone seems to be using their
    # birthdate. Why go against the grain?
    add_header Expires "Tue, 13 Jun 1977 03:45:00 GMT";
    # We bypass all delays in the post-check and pre-check
    # parameters of Cache-Control. Both set to 0.
    add_header Cache-Control "must-revalidate, post-check=0, pre-check=0";
    # Funny...perhaps. Egocentric? Damn right!;
    add_header X-Header "Boost Hel√°s Avril 1.0";
    
    # We try each boost URI in succession, if every one of them
    # fails then relay to Drupal.
    try_files /cache/normal/$host${uri}_${args}.html /cache/perm/$host${uri}_.css /cache/perm/$host${uri}_.js /cache/$host/0$uri.html /cache/$host/0${uri}/index.html /index.php?q=$uri&$args;
}


########### Security measures ########## 

## Boost stats.
location = /boost_stats.php {
    fastcgi_pass phpcgi;
    ## To use Apache for serving PHP uncomment the line bellow and
    ## comment out the above.
    #proxy_pass http://phpapache;
}


## Disallow access to .git directory: return 404 as not to disclose
## information.
location = /.git {
    return 404;
}

## Disallow access to patches directory.
location = /patches {
    return 404;
}

## Disallow access to drush backup directory.
location = /backup {
    return 404;
}


## Disable access logs for robots.txt.
location = /robots.txt {
    access_log off;
}


## RSS feed support.
location = /rss.xml {
    try_files $uri /index.php?q=$uri;
}

## XML Sitemap support.
location = /sitemap.xml {
    try_files $uri /index.php?q=$uri;
}

## Support for favicon. Return a 204 (No Content) if the favicon
## doesn't exist.
location = /favicon.ico {
    try_files /favicon.ico =204;
}

## Any other attempt to access PHP files returns a 404.
location ~* ^.+\.php$ {
    return 404; 
}
